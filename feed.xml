<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://marcopollom.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://marcopollom.github.io/" rel="alternate" type="text/html" /><updated>2020-08-17T19:26:01-04:00</updated><id>https://marcopollom.github.io/feed.xml</id><title type="html">Rohan’s Coding Blog</title><subtitle>Easy Python tutorial for beginners taught at an accessible level. Everything in the tutorial is easy to follow and there are many examples to help guide your learning experience.</subtitle><author><name>Rohan S</name></author><entry><title type="html">Linear Search And Max Value Continued</title><link href="https://marcopollom.github.io/python/tutorial/Linear-Search-and-Max-Value-Continued" rel="alternate" type="text/html" title="Linear Search And Max Value Continued" /><published>2020-07-30T00:00:00-04:00</published><updated>2020-07-30T00:00:00-04:00</updated><id>https://marcopollom.github.io/python/tutorial/Linear-Search-and-Max-Value-Continued</id><content type="html" xml:base="https://marcopollom.github.io/python/tutorial/Linear-Search-and-Max-Value-Continued">&lt;p&gt;Now that we know what functions are in Python and how we use them, why don’t we take a look back at our first examples and turn them into functions.&lt;/p&gt;

&lt;p&gt;Lets begin with Linear Search.&lt;/p&gt;

&lt;h2 id=&quot;linear-search-function&quot;&gt;Linear Search Function&lt;/h2&gt;

&lt;p&gt;In our previous example (&lt;a href=&quot;https://marcopollom.github.io/python/tutorial/Linear-Search-and-Max-Value#linear-search&quot;&gt;Example 1&lt;/a&gt;), we came up with a way to find a number within a list of numbers. Here is what we made:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Our list of numbers
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the number we want to find
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Loops over each element.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Target Number Inside the List&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Exits the loop if the condition is True
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Target Number is NOT Inside the List&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, lets consider what the parameters for this function would be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;A List of numbers&lt;/li&gt;
  &lt;li&gt;Target number&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can begin to write our function:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Linear_Search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now reuse some of the code we initially wrote to fill the body of this function.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Linear_Search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Target Number Inside the List&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Exits the function
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Target Number is NOT Inside the List&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are done! We can now call this function to perform this action.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;target_num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Linear_Search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Target Number Inside the List&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Exits the function
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Target Number is NOT Inside the List&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Linear_Search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Prints Target Number is NOT Inside the List
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;max-value-function&quot;&gt;Max Value Function&lt;/h2&gt;

&lt;p&gt;Similarly, we can make the max value algorithm into a function. Lets start with what we had.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Our list of numbers
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Sets max value to the first element.
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Loops over each element.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Checks if the current max value is less than an element
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Switches the old max value to the new max value
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Prints max value
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For this function, we only need one parameter: the list of numbers.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can fill in the body now.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;maximum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maximum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;maximum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maximum&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Returns max value
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The function is complete! Notice how we return the maximum value instead of printing it out. To see the output of this function, we would have to print the function out itself.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;num_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;maximum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maximum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;maximum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maximum&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Prints 100
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Rohan S</name></author><category term="tutorial" /><summary type="html">Now that we know what functions are in Python and how we use them, why don’t we take a look back at our first examples and turn them into functions. Lets begin with Linear Search. Linear Search Function In our previous example (Example 1), we came up with a way to find a number within a list of numbers. Here is what we made: list_of_numbers = [1, 3, 5, 7, 9, 10, 12, 14] # Our list of numbers target_number = 7 # This is the number we want to find for element in list_of_numbers: # Loops over each element. if element == target_number: print(&quot;Target Number Inside the List&quot;) break # Exits the loop if the condition is True else: print(&quot;Target Number is NOT Inside the List&quot;) First, lets consider what the parameters for this function would be: A List of numbers Target number We can begin to write our function: def Linear_Search(number_list, target): pass We can now reuse some of the code we initially wrote to fill the body of this function. def Linear_Search(number_list, target): for number in number_list: if number == target: print(&quot;Target Number Inside the List&quot;) return # Exits the function print(&quot;Target Number is NOT Inside the List&quot;) We are done! We can now call this function to perform this action. nums = [1, 4, 7, 2 ,7, 20, 100] target_num = 22 def Linear_Search(number_list, target): for number in number_list: if number == target: print(&quot;Target Number Inside the List&quot;) return # Exits the function print(&quot;Target Number is NOT Inside the List&quot;) Linear_Search(nums, target_num) # Prints Target Number is NOT Inside the List Max Value Function Similarly, we can make the max value algorithm into a function. Lets start with what we had. list_of_numbers = [1, 3, 5, 7, 9, 10, 12, 14] # Our list of numbers max_value = list_of_numbers[0] # Sets max value to the first element. for element in list_of_numbers: # Loops over each element. if element &amp;gt; max_value: # Checks if the current max value is less than an element max_value = element # Switches the old max value to the new max value print(max_value) # Prints max value For this function, we only need one parameter: the list of numbers. def max_value(number_list): pass We can fill in the body now. def max_value(number_list): maximum = number_list[0] for number in number_list: if number &amp;gt; maximum: maximum = number return maximum # Returns max value The function is complete! Notice how we return the maximum value instead of printing it out. To see the output of this function, we would have to print the function out itself. num_list = [1, 4, 2, 3, 4, 5, 7, -40, 100, 32] def max_value(number_list): maximum = number_list[0] for number in number_list: if number &amp;gt; maximum: maximum = number return maximum print(max_value(num_list)) # Prints 100</summary></entry><entry><title type="html">Functions</title><link href="https://marcopollom.github.io/python/tutorial/Functions" rel="alternate" type="text/html" title="Functions" /><published>2020-07-29T00:00:00-04:00</published><updated>2020-07-29T00:00:00-04:00</updated><id>https://marcopollom.github.io/python/tutorial/Functions</id><content type="html" xml:base="https://marcopollom.github.io/python/tutorial/Functions">&lt;p&gt;Functions in Python are reusable lines of code that only run once they are called on.&lt;/p&gt;

&lt;p&gt;Functions can be used to shorten the overall lines of code needed in a program, as well as modify and return data.&lt;/p&gt;

&lt;p&gt;The Syntax for functions is as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Do stuff here .....
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# optional
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Functions in Python follow similar naming conventions to that of variables, however we must include the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def&lt;/code&gt; keyword before the function name and a set of parentheses after the function name.&lt;/p&gt;

&lt;p&gt;Like loops and conditionals, the lines of code we want to run within a function must be indented correctly.&lt;/p&gt;

&lt;h2 id=&quot;calling-functions&quot;&gt;Calling Functions&lt;/h2&gt;

&lt;p&gt;If we wanted to execute, or call, the lines within a function, all we have to do is write the name of the function followed by parentheses. For example:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;say_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hi!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Notice no return statement
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;say_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;function-parameters&quot;&gt;Function Parameters&lt;/h2&gt;

&lt;p&gt;Functions can also take input data that can be used within the function. These inputs are known as parameters and are defined when the function is defined. For example:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;introduce_person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Welcome &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;introduce_person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Doe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Prints out &quot;Welcome John Doe!&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example above, we have a function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;introduce_person&lt;/code&gt; that takes in two parameters, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;first_name&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;last_name&lt;/code&gt;, and prints out a string that greets that person.&lt;/p&gt;

&lt;p&gt;Function parameters can be of any type and there can be an infinite amount of them defined within a function.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If a function is defined with a certain amount of parameters, then that function must be called with the same amount of arguments.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;function-returns&quot;&gt;Function Returns&lt;/h2&gt;

&lt;p&gt;Python functions have an optional return statement, which allows functions to output data to variables. For instance:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;summation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;summation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Prints 9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;closing-remarks&quot;&gt;Closing Remarks&lt;/h2&gt;

&lt;p&gt;You may have noticed by now, but we have been using functions without even knowing it! The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt; function is a very useful built-in function in Python as it allows us to write notes/outputs directly into the console. Later on, we will see some more important built-in Python functions.&lt;/p&gt;</content><author><name>Rohan S</name></author><category term="tutorial" /><summary type="html">Functions in Python are reusable lines of code that only run once they are called on. Functions can be used to shorten the overall lines of code needed in a program, as well as modify and return data. The Syntax for functions is as follows: def my_function(): # Do stuff here ..... return data # optional Functions in Python follow similar naming conventions to that of variables, however we must include the def keyword before the function name and a set of parentheses after the function name. Like loops and conditionals, the lines of code we want to run within a function must be indented correctly. Calling Functions If we wanted to execute, or call, the lines within a function, all we have to do is write the name of the function followed by parentheses. For example: def say_hi(): print(&quot;Hi!&quot;) # Notice no return statement say_hi() Function Parameters Functions can also take input data that can be used within the function. These inputs are known as parameters and are defined when the function is defined. For example: def introduce_person(first_name, last_name): print(&quot;Welcome &quot; + first_name + &quot; &quot; + last_name + &quot;!&quot;) introduce_person(&quot;John&quot;, &quot;Doe&quot;) # Prints out &quot;Welcome John Doe!&quot; In the example above, we have a function introduce_person that takes in two parameters, first_name and last_name, and prints out a string that greets that person. Function parameters can be of any type and there can be an infinite amount of them defined within a function. If a function is defined with a certain amount of parameters, then that function must be called with the same amount of arguments. Function Returns Python functions have an optional return statement, which allows functions to output data to variables. For instance: def add(x, y): return x + y summation = add(5, 4) print(summation) # Prints 9 Closing Remarks You may have noticed by now, but we have been using functions without even knowing it! The print function is a very useful built-in function in Python as it allows us to write notes/outputs directly into the console. Later on, we will see some more important built-in Python functions.</summary></entry><entry><title type="html">Linear Search And Max Value</title><link href="https://marcopollom.github.io/python/tutorial/Linear-Search-and-Max-Value" rel="alternate" type="text/html" title="Linear Search And Max Value" /><published>2020-07-29T00:00:00-04:00</published><updated>2020-07-29T00:00:00-04:00</updated><id>https://marcopollom.github.io/python/tutorial/Linear-Search-and-Max-Value</id><content type="html" xml:base="https://marcopollom.github.io/python/tutorial/Linear-Search-and-Max-Value">&lt;p&gt;Since we have a good enough foundation with Python so far, I think it is time to introduce two simple algorithms that use most of what we have learned so far.&lt;/p&gt;

&lt;h3 id=&quot;linear-search&quot;&gt;Linear Search&lt;/h3&gt;

&lt;p&gt;The first algorithm we will cover is Linear Search. Linear Search is the processes of checking if an element, for example number, exists within a list by checking each element one-by-one.&lt;/p&gt;

&lt;p&gt;Let’s begin.&lt;/p&gt;

&lt;p&gt;First off, we need a list to actually check values in:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Our list of numbers
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we need a number that we wish to know if its in our list.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Our list of numbers
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the number we want to find
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we have a list and a target, we need a way to loop over every element. We could use a while loop, but since we are able to determine the length of the list, I think a for loop would suffice.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Our list of numbers
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the number we want to find
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Loops over each element.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Pass tells Python to ignore the execute of the block
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great! Now is the &lt;em&gt;hard part&lt;/em&gt;. We need to check whether or not an element is in the list. We can do this by using an if statement and check against each element in the list. We must then print out the result&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Our list of numbers
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is the number we want to find
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Loops over each element.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target_number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Target Number Inside the List&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Exits the loop if the condition is True
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Target Number is NOT Inside the List&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And with that, we are done.&lt;/p&gt;

&lt;p&gt;Note: This code would work even if the list contained other types of data. This is also not the only way to create this algorithm, give it a try using a while loop instead.&lt;/p&gt;

&lt;h3 id=&quot;max-value&quot;&gt;Max Value&lt;/h3&gt;

&lt;p&gt;The second algorithm we will create is called the Max Value Algorithm, and as the name implies, it searches for the largest number in a list.&lt;/p&gt;

&lt;p&gt;We can reuse bits of the code used for the previous algorithm:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Our list of numbers
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Loops over each element.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that, we must first decide what the max value should be. Since our goal is to find the max value in a given list, we should first pick a value within the list to &lt;strong&gt;claim&lt;/strong&gt; that the value we picked is the maximum value. While it does not matter which element you pick, it is common to claim the first element is the largest value.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Our list of numbers
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Sets max value to the first element.
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Loops over each element.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we have to check each value against each value in the list. We can again use an if statement to help us out.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Our list of numbers
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Sets max value to the first element.
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_of_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Loops over each element.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Checks if the current max value is less than an element
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Switches the old max value to the new max value
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Prints max value
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that, we are done.&lt;/p&gt;

&lt;p&gt;Note: This program would work even if the numbers in the list we’re not in ascending order.&lt;/p&gt;

&lt;p&gt;Why not try to edit this program to find the smallest value in a list?&lt;/p&gt;</content><author><name>Rohan S</name></author><category term="tutorial" /><summary type="html">Since we have a good enough foundation with Python so far, I think it is time to introduce two simple algorithms that use most of what we have learned so far. Linear Search The first algorithm we will cover is Linear Search. Linear Search is the processes of checking if an element, for example number, exists within a list by checking each element one-by-one. Let’s begin. First off, we need a list to actually check values in: list_of_numbers = [1, 3, 5, 7, 9, 10, 12, 14] # Our list of numbers Now we need a number that we wish to know if its in our list. list_of_numbers = [1, 3, 5, 7, 9, 10, 12, 14] # Our list of numbers target_number = 7 # This is the number we want to find Now that we have a list and a target, we need a way to loop over every element. We could use a while loop, but since we are able to determine the length of the list, I think a for loop would suffice. list_of_numbers = [1, 3, 5, 7, 9, 10, 12, 14] # Our list of numbers target_number = 7 # This is the number we want to find for elements in list_of_numbers: # Loops over each element. pass # Pass tells Python to ignore the execute of the block Great! Now is the hard part. We need to check whether or not an element is in the list. We can do this by using an if statement and check against each element in the list. We must then print out the result list_of_numbers = [1, 3, 5, 7, 9, 10, 12, 14] # Our list of numbers target_number = 7 # This is the number we want to find for element in list_of_numbers: # Loops over each element. if element == target_number: print(&quot;Target Number Inside the List&quot;) break # Exits the loop if the condition is True else: print(&quot;Target Number is NOT Inside the List&quot;) And with that, we are done. Note: This code would work even if the list contained other types of data. This is also not the only way to create this algorithm, give it a try using a while loop instead. Max Value The second algorithm we will create is called the Max Value Algorithm, and as the name implies, it searches for the largest number in a list. We can reuse bits of the code used for the previous algorithm: list_of_numbers = [1, 3, 5, 7, 9, 10, 12, 14] # Our list of numbers for element in list_of_numbers: # Loops over each element. pass With that, we must first decide what the max value should be. Since our goal is to find the max value in a given list, we should first pick a value within the list to claim that the value we picked is the maximum value. While it does not matter which element you pick, it is common to claim the first element is the largest value. list_of_numbers = [1, 3, 5, 7, 9, 10, 12, 14] # Our list of numbers max_value = list_of_numbers[0] # Sets max value to the first element. for element in list_of_numbers: # Loops over each element. pass Now we have to check each value against each value in the list. We can again use an if statement to help us out. list_of_numbers = [1, 3, 5, 7, 9, 10, 12, 14] # Our list of numbers max_value = list_of_numbers[0] # Sets max value to the first element. for element in list_of_numbers: # Loops over each element. if element &amp;gt; max_value: # Checks if the current max value is less than an element max_value = element # Switches the old max value to the new max value print(max_value) # Prints max value With that, we are done. Note: This program would work even if the numbers in the list we’re not in ascending order. Why not try to edit this program to find the smallest value in a list?</summary></entry><entry><title type="html">Hello</title><link href="https://marcopollom.github.io/hello/" rel="alternate" type="text/html" title="Hello" /><published>2020-05-27T00:00:00-04:00</published><updated>2020-05-27T00:00:00-04:00</updated><id>https://marcopollom.github.io/hello</id><content type="html" xml:base="https://marcopollom.github.io/hello/">&lt;h2 id=&quot;welcome-to-the-blog&quot;&gt;Welcome to the Blog&lt;/h2&gt;</content><author><name>Rohan S</name></author><summary type="html">Welcome to the Blog</summary></entry><entry><title type="html">Booleans</title><link href="https://marcopollom.github.io/python/tutorial/Booleans" rel="alternate" type="text/html" title="Booleans" /><published>2020-05-25T00:00:00-04:00</published><updated>2020-05-25T00:00:00-04:00</updated><id>https://marcopollom.github.io/python/tutorial/Booleans</id><content type="html" xml:base="https://marcopollom.github.io/python/tutorial/Booleans">&lt;h2 id=&quot;booleans&quot;&gt;Booleans&lt;/h2&gt;

&lt;p&gt;Booleans in Python are truth values, i.e. True or False.&lt;/p&gt;

&lt;p&gt;Booleans are generally used for control flow in programs.&lt;/p&gt;

&lt;p&gt;The 2 types of boolean values in Python are &lt;strong&gt;True&lt;/strong&gt; and &lt;strong&gt;False&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Both boolean values must start with an Uppercase Letter&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# correct
&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# correct
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# wrong
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# wrong
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’ll go into detail on how to use boolean values later, but for now that is all you need to know about booleans.&lt;/p&gt;</content><author><name>Rohan S</name></author><category term="tutorial" /><summary type="html">Booleans Booleans in Python are truth values, i.e. True or False. Booleans are generally used for control flow in programs. The 2 types of boolean values in Python are True and False Both boolean values must start with an Uppercase Letter True # correct False # correct false # wrong true # wrong We’ll go into detail on how to use boolean values later, but for now that is all you need to know about booleans.</summary></entry><entry><title type="html">Collections</title><link href="https://marcopollom.github.io/python/tutorial/Collections" rel="alternate" type="text/html" title="Collections" /><published>2020-05-25T00:00:00-04:00</published><updated>2020-05-25T00:00:00-04:00</updated><id>https://marcopollom.github.io/python/tutorial/Collections</id><content type="html" xml:base="https://marcopollom.github.io/python/tutorial/Collections">&lt;h2 id=&quot;lists-tuples-dictionaries&quot;&gt;Lists, Tuples, Dictionaries&lt;/h2&gt;

&lt;p&gt;Lists, Tuples, Dictionaries are all collection data types, meaning that they can store multiple different items within one entry&lt;/p&gt;

&lt;p&gt;Here are some formal definitions of these data  types and some examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Lists are collections that are ordered, changeable, and allow duplicates.&lt;/li&gt;
  &lt;li&gt;Tuples are collections that are ordered, unchangeable, and allow duplicates.&lt;/li&gt;
  &lt;li&gt;Dictionaries are collections that are unordered, changeable, indexed, and do not allow duplicates.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is a list
&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is a Tuple
&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;goodbye&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;John Doe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# This is a dictionary
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that out of the way, let’s delve deeper into what those terms actually mean.&lt;/p&gt;

&lt;h2 id=&quot;ordered-and-indexed&quot;&gt;Ordered and Indexed&lt;/h2&gt;

&lt;h3 id=&quot;ordered&quot;&gt;Ordered&lt;/h3&gt;

&lt;p&gt;In Python, both Lists and Tuples are ordered, meaning that each item within the collection has a specific number attached to them. We call this number the &lt;em&gt;index&lt;/em&gt; of the element.&lt;/p&gt;

&lt;p&gt;Heres a list and a tuple with the same elements&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this example, the first element of both the list and tuple is the string ‘a’, and they share the same index, namely index 0.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;All lists and tuples start at index 0 and then increment by 1 for each next element&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thus the letter ‘b’ has index 1, ‘c’ index 2, and so on.&lt;/p&gt;

&lt;h3 id=&quot;indexed&quot;&gt;Indexed&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;When we say Dictionary is unordered, it means that the elements inside the collection do not have an index associated with them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, Dictionaries do have a way of relating elements.&lt;/p&gt;

&lt;p&gt;Dictionaries have two different attributes: &lt;em&gt;Keys and Definitions&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lets breakdown the structure of a dictionary&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;definition1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;definition2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This is equivalent to {key1 : definition1, key2 : definition2} but is easier to read
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A good way of thinking about dictionaries in Python is to think of dictionaries in language!&lt;/p&gt;

&lt;p&gt;Keys are like words in a standard dictionary and each word will have a definition. In Python, both the keys and definitions can be of any data type.&lt;/p&gt;

&lt;p&gt;They way we access elements within a dictionary is to use the &lt;strong&gt;key&lt;/strong&gt; as an index, similar to how we would look up a word in a real dictionary.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;John&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I wanted to see to access the String “John”, I would use the &lt;strong&gt;name&lt;/strong&gt; index.&lt;/p&gt;

&lt;h2 id=&quot;changeable-vs-unchangeable&quot;&gt;Changeable vs Unchangeable&lt;/h2&gt;

&lt;p&gt;The ability to change, often known as mutability, refers to the ability to alter the data within a collection.&lt;/p&gt;

&lt;p&gt;Both lists and dictionaries are mutable data types, whereas tuples are not.&lt;/p&gt;

&lt;h2 id=&quot;duplicates&quot;&gt;Duplicates&lt;/h2&gt;

&lt;p&gt;Duplicate entries, meaning the same element, can appear multiple times within lists and tuples.&lt;/p&gt;

&lt;p&gt;Dictionaries cannot have duplicate keys, however, they can have duplicate definitions.&lt;/p&gt;</content><author><name>Rohan S</name></author><category term="tutorial" /><summary type="html">Lists, Tuples, Dictionaries Lists, Tuples, Dictionaries are all collection data types, meaning that they can store multiple different items within one entry Here are some formal definitions of these data types and some examples: Lists are collections that are ordered, changeable, and allow duplicates. Tuples are collections that are ordered, unchangeable, and allow duplicates. Dictionaries are collections that are unordered, changeable, indexed, and do not allow duplicates. [1, 2, 2, 3, 4, 5, 6, 23, 100, &quot;John&quot;] # This is a list (1, 2, 3, 4, 4, 5, 5, 5, 6, &quot;Hello&quot;) # This is a Tuple {1:&quot;hello&quot;, 2:&quot;goodbye&quot;, &quot;name&quot;:&quot;John Doe&quot;} # This is a dictionary With that out of the way, let’s delve deeper into what those terms actually mean. Ordered and Indexed Ordered In Python, both Lists and Tuples are ordered, meaning that each item within the collection has a specific number attached to them. We call this number the index of the element. Heres a list and a tuple with the same elements ['a', 'b', 'c', 1, 2, 3] ('a', 'b', 'c', 1 , 2, 3) In this example, the first element of both the list and tuple is the string ‘a’, and they share the same index, namely index 0. All lists and tuples start at index 0 and then increment by 1 for each next element Thus the letter ‘b’ has index 1, ‘c’ index 2, and so on. Indexed When we say Dictionary is unordered, it means that the elements inside the collection do not have an index associated with them. However, Dictionaries do have a way of relating elements. Dictionaries have two different attributes: Keys and Definitions Lets breakdown the structure of a dictionary { key1 : definition1, key2 : definition2 } # This is equivalent to {key1 : definition1, key2 : definition2} but is easier to read A good way of thinking about dictionaries in Python is to think of dictionaries in language! Keys are like words in a standard dictionary and each word will have a definition. In Python, both the keys and definitions can be of any data type. They way we access elements within a dictionary is to use the key as an index, similar to how we would look up a word in a real dictionary. For example: { 'name' : &quot;John&quot;, 'age' : 26 } If I wanted to see to access the String “John”, I would use the name index. Changeable vs Unchangeable The ability to change, often known as mutability, refers to the ability to alter the data within a collection. Both lists and dictionaries are mutable data types, whereas tuples are not. Duplicates Duplicate entries, meaning the same element, can appear multiple times within lists and tuples. Dictionaries cannot have duplicate keys, however, they can have duplicate definitions.</summary></entry><entry><title type="html">Conditionals</title><link href="https://marcopollom.github.io/python/tutorial/Conditionals" rel="alternate" type="text/html" title="Conditionals" /><published>2020-05-25T00:00:00-04:00</published><updated>2020-05-25T00:00:00-04:00</updated><id>https://marcopollom.github.io/python/tutorial/Conditionals</id><content type="html" xml:base="https://marcopollom.github.io/python/tutorial/Conditionals">&lt;h2 id=&quot;if-and-if-else-statements&quot;&gt;if and if-else Statements&lt;/h2&gt;

&lt;p&gt;This page will cover the basics on if/else statements in Python.&lt;/p&gt;

&lt;p&gt;What are if/else statements?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;if/else statements are decision making statements that only execute if a certain condition is met.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Decision making is a very useful tool when it comes to programming because it allows to control the execution of our program given certain event or conditions.&lt;/p&gt;

&lt;h3 id=&quot;the-if-statement&quot;&gt;The if statement&lt;/h3&gt;

&lt;p&gt;To write and if statement in Python, all you have to do is type &lt;em&gt;if&lt;/em&gt; followed by the &lt;em&gt;conditional statement,&lt;/em&gt; with an optional parentheses.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# The condition must evaluate to True in order to execute the code within the block below
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# execute code in here
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is important to note the colon and the indentation after the if statement since Python will only execute the code within the block right underneath
A block in python is the equivalent to 4-spaces and in most cases 1-tab.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s look at some more examples.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;monday&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;monday&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Today is Monday&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# prints Today is Monday
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;days_in_month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days_in_month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The month is February&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# prints The month is February
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;number_12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;number_12&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number_12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# prints 12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s breakdown each example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In the first example, we set a variable called &lt;strong&gt;day&lt;/strong&gt; to be equal to monday. Then, by using an if statement, we check whether &lt;strong&gt;day&lt;/strong&gt; is equal to “monday.” Since that results in a True statement, we execute the code inside the block underneath and print out “Today is Monday.”&lt;/li&gt;
  &lt;li&gt;In the second example, we set variable &lt;strong&gt;days_in_month&lt;/strong&gt; to be 28. We then check if the &lt;strong&gt;days_in_month&lt;/strong&gt; has less than 30 days, which results in a rue statement, thus we print out The month is February.&lt;/li&gt;
  &lt;li&gt;In the final example, we have a variable called &lt;strong&gt;number_12&lt;/strong&gt; set to equal 12. We then check if our &lt;strong&gt;number_12&lt;/strong&gt; is NOT Equal to 12, which results in a False statement, thus the code in the block below does not get executed and we do not print out the &lt;strong&gt;number_12&lt;/strong&gt; variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note: I’ve introduced a new ‘command’ in these examples called &lt;strong&gt;print&lt;/strong&gt;. Print is special type of function that allows us to output (print) whatever is inside the parentheses.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;ifelifelse-statements&quot;&gt;If/elif/else Statements&lt;/h3&gt;

&lt;p&gt;There comes times when we need multiple condition to test before we can continue the execution of our program. Python allows us to do this by the use of elif statements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;elif&lt;/strong&gt;, a contraction of else if, follows the exact same syntax as the &lt;em&gt;if statement&lt;/em&gt; and there can be as many as you need. Lets see an example:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The number is 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The number is 4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The number is 5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The number is 6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Prints The number is 5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, we have a variable &lt;em&gt;number&lt;/em&gt; set to 5. Below we check whether if the number is 3, 4, 5, or 6 using if and elif statements. Since the equality evaluates to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt; in the 2nd elif statement, the program prints out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;The number is 5&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What if no condition is satisfied by the input, but we still want to output or handle this unplanned event? This is where the &lt;em&gt;else statement&lt;/em&gt; comes in.&lt;/p&gt;

&lt;p&gt;The else statement will only get executed if no other if or elif statement is satisfied.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Unlike the if and elif statements, the else statement takes no condition and there can be only one at the end of any given if statement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here’s and example:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The number is divisible by 2.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The number is divisible by 5.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The number is not divisible by 2 or 5.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Prints The number is not divisible by 2 or 5.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example above, we have a variable called &lt;em&gt;number&lt;/em&gt; set to 33. Below we check whether the number is divisible by 2 then 5 by using the modulo operator. Since 33 is neither divisible by 2 or 5, the &lt;em&gt;else statement&lt;/em&gt; is invoked and the program prints out &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;The number is not divisible by 2 or 5.&quot;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;closing-remark&quot;&gt;Closing Remark&lt;/h4&gt;

&lt;p&gt;You may have noticed through either the examples given or your own examples that sometimes the input will satisfy more than one of the conditions specified. In that case, Python will only execute the first satisfied condition and then exit the conditional statement block.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The number is divisible by 2.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The number is divisible by 5.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The number is not divisible by 2 or 5.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Prints The number is divisible by 2.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Even though the number 10 is divisible by 2 and 5, Python will only execute the first if statement.&lt;/p&gt;</content><author><name>Rohan S</name></author><category term="tutorial" /><summary type="html">if and if-else Statements This page will cover the basics on if/else statements in Python. What are if/else statements? if/else statements are decision making statements that only execute if a certain condition is met. Decision making is a very useful tool when it comes to programming because it allows to control the execution of our program given certain event or conditions. The if statement To write and if statement in Python, all you have to do is type if followed by the conditional statement, with an optional parentheses. if (condition): # The condition must evaluate to True in order to execute the code within the block below # execute code in here It is important to note the colon and the indentation after the if statement since Python will only execute the code within the block right underneath A block in python is the equivalent to 4-spaces and in most cases 1-tab. Let’s look at some more examples. day = &quot;monday&quot; if day == &quot;monday&quot;: print(&quot;Today is Monday&quot;) # prints Today is Monday days_in_month = 28 if (days_in_month &amp;lt; 30): print(&quot;The month is February&quot;) # prints The month is February number_12 = 12 if number_12 != 12: number_12 = 45 print(number_12) # prints 12 Let’s breakdown each example: In the first example, we set a variable called day to be equal to monday. Then, by using an if statement, we check whether day is equal to “monday.” Since that results in a True statement, we execute the code inside the block underneath and print out “Today is Monday.” In the second example, we set variable days_in_month to be 28. We then check if the days_in_month has less than 30 days, which results in a rue statement, thus we print out The month is February. In the final example, we have a variable called number_12 set to equal 12. We then check if our number_12 is NOT Equal to 12, which results in a False statement, thus the code in the block below does not get executed and we do not print out the number_12 variable. Note: I’ve introduced a new ‘command’ in these examples called print. Print is special type of function that allows us to output (print) whatever is inside the parentheses. If/elif/else Statements There comes times when we need multiple condition to test before we can continue the execution of our program. Python allows us to do this by the use of elif statements. elif, a contraction of else if, follows the exact same syntax as the if statement and there can be as many as you need. Lets see an example: number = 5 if number == 3: print(&quot;The number is 3&quot;) elif number == 4: print(&quot;The number is 4&quot;) elif number == 5: print(&quot;The number is 5&quot;) elif number == 6: print(&quot;The number is 6&quot;) # Prints The number is 5 In this example, we have a variable number set to 5. Below we check whether if the number is 3, 4, 5, or 6 using if and elif statements. Since the equality evaluates to True in the 2nd elif statement, the program prints out &quot;The number is 5&quot; What if no condition is satisfied by the input, but we still want to output or handle this unplanned event? This is where the else statement comes in. The else statement will only get executed if no other if or elif statement is satisfied. Unlike the if and elif statements, the else statement takes no condition and there can be only one at the end of any given if statement. Here’s and example: number = 33 if number % 2 == 0: print(&quot;The number is divisible by 2.&quot;) elif number % 5 == 0: print(&quot;The number is divisible by 5.&quot;) else: print(&quot;The number is not divisible by 2 or 5.&quot;) # Prints The number is not divisible by 2 or 5. In the example above, we have a variable called number set to 33. Below we check whether the number is divisible by 2 then 5 by using the modulo operator. Since 33 is neither divisible by 2 or 5, the else statement is invoked and the program prints out &quot;The number is not divisible by 2 or 5.&quot; Closing Remark You may have noticed through either the examples given or your own examples that sometimes the input will satisfy more than one of the conditions specified. In that case, Python will only execute the first satisfied condition and then exit the conditional statement block. number = 10 if number % 2 == 0: print(&quot;The number is divisible by 2.&quot;) elif number % 5 == 0: print(&quot;The number is divisible by 5.&quot;) else: print(&quot;The number is not divisible by 2 or 5.&quot;) # Prints The number is divisible by 2. Even though the number 10 is divisible by 2 and 5, Python will only execute the first if statement.</summary></entry><entry><title type="html">Intro</title><link href="https://marcopollom.github.io/python/tutorial/Intro" rel="alternate" type="text/html" title="Intro" /><published>2020-05-25T00:00:00-04:00</published><updated>2020-05-25T00:00:00-04:00</updated><id>https://marcopollom.github.io/python/tutorial/Intro</id><content type="html" xml:base="https://marcopollom.github.io/python/tutorial/Intro">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This series of lesson will be about the Python programming language. I will try to keep everything as beginner friendly as I can in these lessons. The only assumption I will make is that you know how to add :).&lt;/p&gt;

&lt;p&gt;If you want to follow along or program Python on your own, I recommend the following tools:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python 3&lt;/a&gt; or newer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; as a text editor&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://py3.codeskulptor.org/&quot;&gt;Codeskulptor&lt;/a&gt; an online Python Interpreter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even though I recommend Visual Studio Code, any good Python editor will do. This tutorial will focus on Python 3, so make sure you have the latest stable build installed.&lt;/p&gt;

&lt;p&gt;Let’s Begin!&lt;/p&gt;</content><author><name>Rohan S</name></author><category term="tutorial" /><summary type="html">Introduction This series of lesson will be about the Python programming language. I will try to keep everything as beginner friendly as I can in these lessons. The only assumption I will make is that you know how to add :). If you want to follow along or program Python on your own, I recommend the following tools: Python 3 or newer Visual Studio Code as a text editor Codeskulptor an online Python Interpreter Even though I recommend Visual Studio Code, any good Python editor will do. This tutorial will focus on Python 3, so make sure you have the latest stable build installed. Let’s Begin!</summary></entry><entry><title type="html">Logic</title><link href="https://marcopollom.github.io/python/tutorial/Logic" rel="alternate" type="text/html" title="Logic" /><published>2020-05-25T00:00:00-04:00</published><updated>2020-05-25T00:00:00-04:00</updated><id>https://marcopollom.github.io/python/tutorial/Logic</id><content type="html" xml:base="https://marcopollom.github.io/python/tutorial/Logic">&lt;p&gt;Python allows us to control the flow of our program using logical operators and truth values: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;operators&quot;&gt;Operators&lt;/h3&gt;

&lt;p&gt;Python also allows us to compare attributes of data by using the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Equality (==)&lt;/li&gt;
  &lt;li&gt;Greater than or equal (&amp;gt;=)&lt;/li&gt;
  &lt;li&gt;Less than or equal (&amp;lt;=)&lt;/li&gt;
  &lt;li&gt;Less than (&amp;lt;)&lt;/li&gt;
  &lt;li&gt;Greater than (&amp;gt;)&lt;/li&gt;
  &lt;li&gt;Not equal (!=)&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Double equals is used for checking equality and not used for variable assignment&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here are some examples:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;John&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;James&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# equals False
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# equals True
&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'22'&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# equals True
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The last example shows that the both the equality and the not-equality operator checks for types as well. A string will never be ‘equal’ to a number.&lt;/p&gt;

&lt;h3 id=&quot;truth-table&quot;&gt;Truth Table&lt;/h3&gt;

&lt;p&gt;There are 2 operators that allow for the combination of these truth values: &lt;strong&gt;and&lt;/strong&gt; and &lt;strong&gt;or&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These operators will follow the following set of logical rules:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Statement 1&lt;/th&gt;
      &lt;th&gt;Statement 2&lt;/th&gt;
      &lt;th&gt;Statement 1 &lt;strong&gt;and&lt;/strong&gt; Statement 2&lt;/th&gt;
      &lt;th&gt;Statement 1 &lt;strong&gt;or&lt;/strong&gt; Statement 2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;T&lt;/td&gt;
      &lt;td&gt;T&lt;/td&gt;
      &lt;td&gt;T&lt;/td&gt;
      &lt;td&gt;T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;T&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;T&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Logical statements have a similar execution style to that of Math.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Parentheses are computed first.&lt;/li&gt;
  &lt;li&gt;Proceeds from left to right.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# equals True
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Rohan S</name></author><category term="tutorial" /><summary type="html">Python allows us to control the flow of our program using logical operators and truth values: True and False. Operators Python also allows us to compare attributes of data by using the following: Equality (==) Greater than or equal (&amp;gt;=) Less than or equal (&amp;lt;=) Less than (&amp;lt;) Greater than (&amp;gt;) Not equal (!=) Double equals is used for checking equality and not used for variable assignment Here are some examples: name = &quot;John&quot; age = 27 name == &quot;James&quot; # equals False age &amp;gt;= 18 # equals True 22 != '22' # equals True The last example shows that the both the equality and the not-equality operator checks for types as well. A string will never be ‘equal’ to a number. Truth Table There are 2 operators that allow for the combination of these truth values: and and or These operators will follow the following set of logical rules: Statement 1 Statement 2 Statement 1 and Statement 2 Statement 1 or Statement 2 T T T T T F F T F T F T F F F F Logical statements have a similar execution style to that of Math. Parentheses are computed first. Proceeds from left to right. (True and False) or True # equals True</summary></entry><entry><title type="html">Loops</title><link href="https://marcopollom.github.io/python/tutorial/Loops" rel="alternate" type="text/html" title="Loops" /><published>2020-05-25T00:00:00-04:00</published><updated>2020-05-25T00:00:00-04:00</updated><id>https://marcopollom.github.io/python/tutorial/Loops</id><content type="html" xml:base="https://marcopollom.github.io/python/tutorial/Loops">&lt;p&gt;Imagine we wanted to print out the first 100 positive integers (1, 2, 3, 4…). Till now, the only way we could do that is by manually printing each number:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can probably tell this get very messy and becomes hard to maintain and edit. What if you wanted to print out the first 100 &lt;em&gt;even&lt;/em&gt; integers, you would have to change every number in each print statement.&lt;/p&gt;

&lt;p&gt;Loops are another important concept in programming. Loops allow for &lt;em&gt;iteration&lt;/em&gt;, meaning that you can sequentially complete actions without having to hard-type them out.&lt;/p&gt;

&lt;p&gt;There are 2 main types of loops in Python: For and While loops.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;em&gt;for loop&lt;/em&gt; is a loop that executes a specified amount of times.&lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;while loop&lt;/em&gt; is a loop that will execute as long as a certain condition is true (similar to that on an if statement).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The syntax for a &lt;em&gt;for loop&lt;/em&gt; is as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# execute code in here
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The word &lt;strong&gt;var&lt;/strong&gt; symbolizes a variable and the word &lt;strong&gt;iterable&lt;/strong&gt; refers to an object that can be iterated (looped) over. For example, lists and dictionaries are iterable.&lt;/p&gt;

&lt;p&gt;The syntax for a &lt;em&gt;while loop&lt;/em&gt; is as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# execute code here:
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, the word &lt;strong&gt;condition&lt;/strong&gt; refers to any logical statement. Note: the condition must evaluate to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt; in order for the loop to execute.&lt;/p&gt;

&lt;p&gt;Let’s take a look on how we could perform the initial example using loops.&lt;/p&gt;

&lt;h3 id=&quot;for-loop&quot;&gt;For loop&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Prints out the first 101 integers starting from 0 to 100. 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;Range is another special function in Python. Range will create a list starting from 0 up until N-1, where N is the number you put into the parentheses.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, using a for loop greatly reduced the amount of code needed to perform the original task.&lt;/p&gt;

&lt;h3 id=&quot;while-loop&quot;&gt;While loop&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you were to run this program, you would notice 2 things. One, the program only prints out the number 0 and Two that it runs for ever.&lt;/p&gt;

&lt;p&gt;This is what is known as an infinite loop, meaning it will never stop. These types of loops can be useful in some cases, but in our example it is a bug. Let’s fix this.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Prints out the first 101 integers starting from 0 to 100.`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is an improvement and it does the task, but I think we can make slightly better. Recall that variables allow us to increment and decrement using a simple shorthand; it would be useful here.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Prints out the first 101 integers starting from 0 to 100.`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now it’s complete.&lt;/p&gt;</content><author><name>Rohan S</name></author><category term="tutorial" /><summary type="html">Imagine we wanted to print out the first 100 positive integers (1, 2, 3, 4…). Till now, the only way we could do that is by manually printing each number: print(1) print(2) print(3) . . . As you can probably tell this get very messy and becomes hard to maintain and edit. What if you wanted to print out the first 100 even integers, you would have to change every number in each print statement. Loops are another important concept in programming. Loops allow for iteration, meaning that you can sequentially complete actions without having to hard-type them out. There are 2 main types of loops in Python: For and While loops. A for loop is a loop that executes a specified amount of times. A while loop is a loop that will execute as long as a certain condition is true (similar to that on an if statement). The syntax for a for loop is as follows: for var in iterable: # execute code in here The word var symbolizes a variable and the word iterable refers to an object that can be iterated (looped) over. For example, lists and dictionaries are iterable. The syntax for a while loop is as follows: while (condition): # execute code here: Here, the word condition refers to any logical statement. Note: the condition must evaluate to True in order for the loop to execute. Let’s take a look on how we could perform the initial example using loops. For loop for integer in range(101): print(integer) # Prints out the first 101 integers starting from 0 to 100. Range is another special function in Python. Range will create a list starting from 0 up until N-1, where N is the number you put into the parentheses. As you can see, using a for loop greatly reduced the amount of code needed to perform the original task. While loop number = 0 while number &amp;lt;= 100: print(number) If you were to run this program, you would notice 2 things. One, the program only prints out the number 0 and Two that it runs for ever. This is what is known as an infinite loop, meaning it will never stop. These types of loops can be useful in some cases, but in our example it is a bug. Let’s fix this. number = 0 while number &amp;lt;= 100: print(number) number = number + 1 # Prints out the first 101 integers starting from 0 to 100.` This is an improvement and it does the task, but I think we can make slightly better. Recall that variables allow us to increment and decrement using a simple shorthand; it would be useful here. number = 0 while number &amp;lt;= 100: print(number) number += 1 # Prints out the first 101 integers starting from 0 to 100.` Now it’s complete.</summary></entry></feed>